Essential topics:

Weeks 1-3: Intro to programing using R with R studio, Using R Projects - use 'how to simulate pi' as an example to work through. 
What key R tools/commands should we teach? Introduce data structures.
Week 4: Github - general principles and using it with Rstudio (code back-ups, collaborative programming).
Week 5: R markdown - how to use it and write up reports with it.
Week 6: Coding style (using Tidyverse principles).
Week 7-8: Data handling, cleaning and visualization with Tidyverse, dplyr, ggplot.
Week 9: project review week - feedback.
Week 10: Debugging and profiling.
Week 11: Parallel processing and 'apply' statements.
Week 12: Using HPC (in general and with R e.g., sluRm, cloud computing).
Week 13: Shiny apps.
Week 14: Further into Git - collaborative research.
Week 15: Additional resources available: Dropbox? Overleaf? Slack? Hadoop Spark, dbPlyr, Tensorflow. 
Maybe a separate week on Big Data, make aware of SQL. (Purrr?).

Exam week: final project presentations.

Possible additional topics:
Intro to Python? (Ideally this shoud be taught in its own course)
R package creation?
Object-oriented programming?


General notes: Course should be lab-based (90 minutes of teaching + 90 minutes of lab each week).
Build the course around project - what Projects?
  Start with solo project - simulating pi.
  Then do a collaborative project.
  And then more projects.

What Resources (books? etc.) should the course use?
http://happygitwithr.com/
The Art of R programming (book)
R Studio resources such as R for Data science (Rmd book)
