# New Course for Health Data Science: PM566 Introduction to Health Data Science (Fall semester)


# New PM 566 syllabus with lectures and labs integrated:

* Week 1 Lecture: Introduction to Data Science tools: R, R Markdown, (Python) 
  * Week 1 Lab: Getting set up with R Studio; using R Markdown
  * Project?: (PM notes:) I would add a simulation-based lab project here and use it as an opportunity to teach good coding styles (using Tidyverse principles). It could extend into week 2, where you use it to teach version control.

* Week 2 Lecture: Version Control & Reproducible Research
  * Week 2 Lab: Getting set up with Git; command line tools; integrating Git in RStudio
  * Project: Simulation-based analysis project continues.
  
* Week 3 Lecture: Exploratory data analysis 
  * Week 3 Lab: Good coding style; the principles of Tidyverse; Tidyverse for EDA (dplyr)
  * Project: Project 2 - something data-based?
  * Homework 1 Due
  
* Week 4 Lecture: Data visualization
  * Week 4 Lab: Using ggplot2
  * Project 2 continues.
  
* Week 5 Lecture: Data cleaning and wrangling
  * Week 5 Lab: R tools for data handling
  * Homework 2 Due

* Week 6 Lecture: Data scraping, using APIs, data security
  * Week 6 Lab: Connecting to APIs, downloading data from APIs

* Week 7 Lecture: Text mining
  * Week 7 Lab: Text mining tools and packages in R
  * Homework 3 Due

* Week 8: Midterm Exam

* Week 9 Lecture: Efficient computing: debugging, profiling, parallelization
  * Week 9 Lab: RStudio tools for profiling, mastering R apply, local parallelization with doParallel
  * Project: New project - something computationally intensive.
 
* Week 10 Lecture: High performance computing, cloud computing
  * Week 10 Lab: R sluRm package, use of USC HPCC, AWS, Google BigQuery
  * Homework 4 Due

* Week 11 Lecture: Managing big data
  * Week 11 Lab: PostgreSQL
 
* Week 12 Lecture: Final project workshop: review project progress, preliminary presentations
  * Homework 5 Due

* Week 13 Lecture: Interactive visualization and data communication I
  * Week 13 Lab: Building a basic Shiny app
  * New project - build a Shiny app.

* Week 14 Lecture: Interactive visualization and data communication II
  * Week 14 Lab: Building github.io website
  * Homework 6 Due

* Week 15 Lecture: Communicating to stakeholders and end users
  * Week 15 Lab: Final project wrap up session

* Exam week: Final project presentations and report 


# List of essential topics from earlier discussion: (I think these are all now integrated into the classes/labs above)

*  Weeks 1-3: Intro to programing using R with R studio, Using R Projects - use 'how to simulate pi' as an example to work through. What key R tools/commands should we teach? Introduce data structures.

*  Week 4: Version Control & Reproducible Research. Github - general principles and using it with Rstudio (code back-ups, collaborative programming).

*  Week 5: R markdown - how to use it and write up reports with it.

*  Week 6: Good Coding style  - use the Tidyverse principles.

*  Week 7-8: Data handling, visualization and cleaning: Introduction to Tidyverse, dplyr, ggplot.

*  Week 9: Project review week - time for them to review projects they are working on and get feedback.

*  Week 10: Debugging and profiling - using Rstudio tools.

*  Week 11: Efficient Computing - Parallel processing using 'parallel' and 'future packages', and general principles, e.g. using 'apply'.

*  Week 12: High-performance computing -  R's sluRm package, use of USC's HPCC, cloud computing.

*  Week 13: Building web apps - Shiny.

*  Week 14: Collaborative research - Get further into Git; create a personal portfolio website using Git and blogdown? Create pull requests and contribute to the tidyverse package? 

*  Week 15: Overview of additional resources available - Dropbox? Overleaf? Slack? Hadoop Spark, dbPlyr, Tensorflow. Maybe a separate week on Big Data? Make aware of SQL?


# Other notes from earlier discussions...

# Key-point: 
Organize course by topic, and then introduce the specific tool that implements that topic. That way, when the tool goes out of date we can just plug in the new tool for the sae topic.

# Possible additional topics:

*  Intro to Python? (Ideally this should be taught in its own course)

*  R package creation?

*  Object-oriented programming?

*  Missing data / imputation? (best handled as a new topic in the existing PM520 Stats Computing, since these methods are statistical in nature?)


# General notes: The course should be lab-based (60-90 minutes of teaching + 90-120 minutes of lab each week).

Build the course around applications/projects - what projects should we use? (Bearing in mind they may know little stats coming into the course.)

*  Start with solo project - simulating pi.

*  Then do a collaborative project.

*  And then more projects.

*  Finish with a project for exam week. (e.g. produce a Shiny app.?)

*  This will also involve a minor re-write of the existing PM520 course, freeing up a small amount of time there that covered ideas that will now be covered in this new course.


# Possible Course texts (Updated with PM 566 texts)

* Introduction to Data Science, by R. Irizarry (https://rafalab.github.io/dsbook/)
* R for Data Science, 2017 Garrett Grolemund and Hadley Wickham. http://r4ds.had.co.nz/
* The Art of R Programming, 2011, Norm Matloftf, no starch press. https://nostarch.com/artofr.htm
* Advanced R, 2014, Hadley Wickham, CRC press. http://adv-r.had.co.nz/ (Second edition is avaliable in print on June 28 https://www.amazon.com/gp/product/0815384572/, online here: https://adv-r.hadley.nz/)
*	R Packages, 2015, Hadley Wickham, O’Reilly. http://r-pkgs.had.co.nz/ (work on a second edition is in development here https://r-pkgs.org/ starting as of 2019-02)
* Mastering Software Development in R, 2017. Roger Peng, Sean Kross, Brooke Anderson. https://bookdown.org/rdpeng/RProgDA/ 
* Doing Data Science, 2013. Cathy O’Neill and Rachel Schutt. O’Reilly Media.
* (optional) Python Data Science Handbook, 2018. Jake VanderPlas. O’Reilly Media. https://jakevdp.github.io/PythonDataScienceHandbook/


# What other resources could the course use?

*  http://happygitwithr.com/     (Using git with RStudio)

*  https://whattheyforgot.org/   (What they forgot to teach you about R)

*  https://swcarpentry.github.io/good-enough-practices-in-scientific-computing/

*  https://github.com/rstudio/rstudio-conf  (RStudio conference workshop repo on GitHub)

*  The Art of R programming (actual book! https://www.amazon.com/Art-Programming-Statistical-Software-Design/dp/1593273843/ref=sr_1_4?keywords=The+Art+of+R+programming&qid=1553794474&s=gateway&sr=8-4)

* Advanced R - Hadley Wickham (https://adv-r.hadley.nz/)

*  R for Data science - Hadley Wickham (https://r4ds.had.co.nz/)

* https://rstudio.cloud/learn/primers (Goes through various programming and data science concepts in short videos. Covers topics from vectors and types, iterators to writing functions.)

* https://www.tidytextmining.com/ (classic introduction to text mining in R. Comes as paper book https://www.amzn.com/1491981652)

* https://quanteda.io/index.html (Another good alternative to tidytext for text mining)

* [Pirating Web Content Responsibly With R](https://rud.is/b/2017/09/19/pirating-web-content-responsibly-with-r/)

* Other RStudio resources?




